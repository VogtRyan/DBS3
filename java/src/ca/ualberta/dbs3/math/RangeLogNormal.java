/*
 * Copyright (c) 2010-2023 Ryan Vogt <rvogt@ualberta.ca>
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

package ca.ualberta.dbs3.math;

/**
 * The <code>RangeLogNormal</code> class is a range of real numbers from which
 * you can draw random values distributed according to a log-normal, or Galton,
 * distribution.
 */
public class RangeLogNormal extends Range {
    /**
     * The minimal value of <code>Math.exp(v)</code> permitted, where
     * <code>v</code> is a Gaussian varaible.
     */
    private static final double GEN_MIN =
        0.0613416090228268220656169229149302719291106858292892677120559294727;

    /**
     * The maximal value of <code>Math.exp(v)</code> permitted, where
     * <code>v</code> is a Gaussian variable.
     */
    private static final double GEN_MAX =
        44.3138331674263916129427197921989334769855097649027471398635206404809;

    /**
     * The proportion of the distance from the minimal value of this range to
     * the maximal value of this range at which we find the expected value.
     */
    private static final double EXPECT_PERCENTILE =
        0.0358709669393938866250442074213384233590368800381338169062561878229;

    /**
     * Creates a new <code>RangeLogNormal</code> between the two given numbers,
     * inclusive.
     *
     * @param min the minimum end of the range.
     * @param max the maximum end of the range.
     * @throws IllegalArgumentException if <code>min</code> is greater than
     *         <code>max</code>.
     */
    public RangeLogNormal(double min, double max) {
        super(min, max);
    }

    /**
     * Returns the expected value of random values drawn from this range.
     *
     * @return the expected value of {@link #getRandom}.
     */
    public double expectedValue() {
        return (this.min
                + (this.max - this.min) * RangeLogNormal.EXPECT_PERCENTILE);
    }

    /**
     * Returns a random number selected according to a Galton distribution from
     * this range, generated by raising Euler's number to a random Gaussian
     * value, and truncating and scaling the result to the upper and lower
     * bounds of this range.
     *
     * @param prng the pseudorandom number generator to use.
     * @return a Galton-distributed random number, guaranteed to be within this
     *         range.
     */
    public double getRandom(Random prng) {
        double d;
        if (this.min == this.max)
            return this.max;

        do {
            d = Math.exp(prng.nextGaussian());
        } while (d < RangeLogNormal.GEN_MIN || d > RangeLogNormal.GEN_MAX);

        double prop = (d - RangeLogNormal.GEN_MIN)
                / (RangeLogNormal.GEN_MAX - RangeLogNormal.GEN_MIN);
        return this.min + (this.max - this.min) * prop;
    }
}
